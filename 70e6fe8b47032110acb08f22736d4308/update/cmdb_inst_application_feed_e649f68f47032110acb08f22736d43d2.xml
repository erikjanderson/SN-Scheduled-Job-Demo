<?xml version="1.0" encoding="UTF-8"?><record_update table="cmdb_inst_application_feed">
    <cmdb_inst_application_feed action="INSERT_OR_UPDATE">
        <active>true</active>
        <after_script><![CDATA[/**
  * Script executed after calling the Identification and Reconciliation Engine (IRE)
  *
  * The following variables are available to the script:
  *    'ireOutput' the array where each element of the array is an object representing the IRE output payload.
  *    'ireInput' the array where each element of the array is an object representing the IRE input payload.
  *    'runId' the current import set run id.
  *    
  * Example:
  */
// (function (ireOutput, ireInput, runId) {
//      for (var i = 0; i < ireOutput.length; i++) {
//          var output = ireOutput[i];
//          var items = output.items;
//          for (var j = 0; j < items.length; j++) {
//              gs.info(items[j].className + ': ' + items[j].sysId);
//          }
//      }
// })(ireOutput, ireInput, runId);
/**
 *
 * The following properties/functions are available for all parameters of type 'Array' inside the input and output payloads e.g. items, relations, referenceItems, lookup and related:
 * length - Returns the number of elements in an array
 *
 * Important points:
 * 1) Both ireInput and ireOutput are read-only.
 * 2) Any changes made to the elements of these arrays will not change the actual values in these arrays once the after script completes.
 * 3) Using any other functions e.g. push(), pop(), shift() and unshift() on ireInput and ireOutput arrays directly will result into unexpected errors.
 *
 * Below is an example of a IRE output payload. There can be more fields/parameters depending on each use case. Refer to the ServiceNow Product Documentation for more examples on the IRE output payload. 
 * Refer the before script for an example of IRE input payload.
 * {
 *  'items': [
 *    {
 *      'className': 'cmdb_ci_computer',
 *      'operation': 'INSERT',
 *      'sysId': '19ffc57c5b42201006447da52d81c707',
 *      'identificationAttempts': [
 *        {
 *          'identifierName': 'Hardware Rule',
 *          'attributes': [
 *            'name'
 *          ],
 *          'attemptResult': 'NO_MATCH',
 *          'searchOnTable': 'cmdb_ci_hardware',
 *          'hybridEntryCiAttributes': []
 *        },
 *        {
 *          'identifierName': 'Hardware Rule',
 *          'attributes': [
 *            'mac_address',
 *            'name'
 *          ],
 *          'attemptResult': 'SKIPPED',
 *          'searchOnTable': 'cmdb_ci_network_adapter',
 *          'hybridEntryCiAttributes': []
 *        }
 *      ]
 *    }
 *  ],
 *  'additionalCommittedItems': [],
 *  'relations': [],
 *  'additionalCommittedRelations': [],
 *  'hasError': false,
 *  'hasWarning': false
 * }
 *
 */

(function (ireOutput, ireInput, runId) {

	for (var r = 0; r < ireOutput.length; r++) {
		var row = ireOutput[r];
		var unrelatedRecordSysId = '';
		for (var i = 0; i < row.items.length; i++) {
			var networkAdapterSysIds = [];
			var item = row.items[i];
			if (item.relatedItems) {
				for (var p = 0; p < item.relatedItems.length; p++) {
					var relatedItem = item.relatedItems[p];
					if (relatedItem.className === 'x_156954_sch_job_d_hardware_unrelated_table') {
						var unRelatedM2MGr = getGlideRecord('x_156954_sch_job_d_hardware_unrelated_table', relatedItem.sysId);
						unrelatedRecordSysId = unRelatedM2MGr.getValue('u_unrelated_table');
					}
					if (relatedItem.className === 'cmdb_ci_network_adapter') {
						networkAdapterSysIds.push(relatedItem.sysId);
					}
				}
			}
		}
		createNetworkAdapterM2Ms(unrelatedRecordSysId, networkAdapterSysIds);
		


	}

})(ireOutput, ireInput, runId);


function getGlideRecord(table, id) {
	var gr = new GlideRecord(table);
	if (gr.get(id)) {
		return gr;
	}
}

function createNetworkAdapterM2Ms(unrelatedRecordSysId, networkAdapterSysIds){
	gs.info(unrelatedRecordSysId + ' : ' +networkAdapterSysIds)
	for(var i = 0; i < networkAdapterSysIds.length; i++){
		var networkAdapterSysId = networkAdapterSysIds[i];

		var gr = new GlideRecord('x_156954_sch_job_d_hardware_unrelated_table');
		gr.addQuery('u_hardware', networkAdapterSysId);
		gr.addQuery('u_unrelated_table', unrelatedRecordSysId);
		gr.query();
		if(!gr.next()){
			gr.initialize();
			gr.u_hardware = networkAdapterSysId;
			gr.u_unrelated_table = unrelatedRecordSysId;
			gr.insert();
		}


	}
}]]></after_script>
        <before_script><![CDATA[/**
  *
  * Script executed for a given batch before calling the Identification and Reconciliation Engine (IRE)
  *
  * The following variables are available to the script:
  *    'input' - the array where each element of the input array is an object. Each object contains a status, reason, and payload.
  *    'runId' - the current import set run id.
  *
  * Example:
  */
// (function(input, runId) {
//     for (var i = 0; i < input.length; i++) {
//         // Skip all payloads which have a computer starting with name as 'TEST-'
//         if (!isComputerNameValid(input[i].payload)) {
//             input[i].status = 'SKIPPED';
//             input[i].reason = 'Skipping IRE processing of this payload.';
//         } else {
//             // Add new value to items
//             input[i].payload.items[0].values.short_description = 'Adding missing description';

//             // Add a new relationship by passing a JSON object (Use unshift() to add a relationship at the beginning)
//             // Similarly, any relation can be removed by using the pop() or shift() methods
//             var relation = {
//                 'parent': 0,
//                 'child': 1,
//                 'type': 'Runs on::Runs'
//             };
//             input[i].payload.relations.push(relation);

//             // Update an existing reference item by passing a JSON object.
//             // Similarly, the entire reference items array can also be updated e.g. input[i].payload.referenceItems = {...}
//             input[i].payload.referenceItems[0] = {
//                 'referenceField': 'software',
//                 'referencedBy': 'internal_id2',
//                 'referenced': 'internal_id1'
//             };
//         }
//     }
// })(input, runId);

// function isComputerNameValid(payload) {
//     for (var i = 0; i < payload.items.length; i++)
//         if (payload.items[i].className == 'cmdb_ci_computer' && payload.items[i].values.name.startsWith('TEST-'))
//             return false;
//     return true;
// }
/**
 * The following properties/functions are available for all parameters of type 'Array' inside the IRE payload e.g. items, relations, referenceItems, lookup and related:
 * length - Returns the number of elements in an array
 * push() - Add an item to the end of an array
 * pop() - Remove an item from the end of an array
 * shift() - Remove an item from the beginning of an array
 * unshift() - Add an item to the beginning of an array
 *
 * Important points:
 * 1) The before script is executed once per batch and not per payload. The input array elements contain all the payloads for a given batch.
 * 2) Each element in the array has only 3 fields i.e. status, reason, and payload. Adding additional fields to the array elements might result in unexpected errors.
 * 3) The 'status' can be set to 'SKIPPED' in order to skip a payload in this batch from further processing. Setting 'status' to any other value will be ignored by the RTE processor.
 * 4) Optionally, a 'reason' can be set for skipping the payload. This will be the message on the import set run for this particular row.
 * 5) To match the batch size after script execution, only the length property is available for input array e.g. input.length 
 * 6) Using any of the above functions e.g. push(), pop(), shift() and unshift() on input array directly will result in unexpected errors.
 *
 * Below is an example of an IRE input payload. There can be more fields/parameters depending on each use case. Refer to the ServiceNow Product Documentation for more examples on the IRE payload.
 * {
 *  'items': [
 *    {
 *      'className': 'cmdb_ci_computer',
 *      'values': {
 *        'name': 'Macbook Pro 15',
 *        'os_version': '5.1.2600',
 *        'ram': '2048',
 *        'disk_space': '1024'
 *      }
 *    }
 *  ]
 * }
 */

(function (input, runId) {

    for (var r = 0; r < input.length; r++) {

        var row = input[r];
        var netAdapterInternalId;
        var parentDeviceInternalId;
        var netAdapterRelatedM2MObj;

        for (var i = 0; i < row.payload.items.length; i++) {
            var item = row.payload.items[i];

            if(i === 0){
                parentDeviceInternalId = item.internal_id;
            }
            if (item.className === 'cmdb_ci_network_adapter') {
                netAdapterInternalId = gs.generateGUID();
                item.internal_id = netAdapterInternalId;
            }
        }
        if(netAdapterInternalId && parentDeviceInternalId){
        	row.payload.relations.push( {
                "parent": -1,
                "child": -1,
                "parent_id": parentDeviceInternalId,
                "child_id": netAdapterInternalId,
                "type": "Owns::Owned by",
                "sys_rel_source_info": {
                    "source_feed": "Example RTE Import (Single Column)",
                    "source_name": "SG-Example"
                }
            });
        }

    }

})(input, runId);]]></before_script>
        <cmdb_inst_application display_value="Example RTE">a249ba8f47032110acb08f22736d4346</cmdb_inst_application>
        <description/>
        <execute_after_script>true</execute_after_script>
        <execute_before_script>false</execute_before_script>
        <name>Example RTE Import (Single Column)</name>
        <sys_class_name>cmdb_inst_application_feed</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-31 12:25:03</sys_created_on>
        <sys_data_source display_value="Example Data Source (Single Column)">b107720f47032110acb08f22736d4349</sys_data_source>
        <sys_id>e649f68f47032110acb08f22736d43d2</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>Example RTE Import (Single Column)</sys_name>
        <sys_package display_value="Scheduled Job Demo" source="x_156954_sch_job_d">70e6fe8b47032110acb08f22736d4308</sys_package>
        <sys_policy/>
        <sys_scope display_value="Scheduled Job Demo">70e6fe8b47032110acb08f22736d4308</sys_scope>
        <sys_update_name>cmdb_inst_application_feed_e649f68f47032110acb08f22736d43d2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-17 20:20:43</sys_updated_on>
    </cmdb_inst_application_feed>
</record_update>
